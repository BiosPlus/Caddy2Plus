name: Docker Build Images
on:
  push:
  schedule:
    - cron: '0 0 * * 2'
jobs:
  Build_Push_DockerHub:
    runs-on: ubuntu-latest
    steps:
    - name: Prepare
      id: prepare
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo ::set-output name=version::${GITHUB_REF#refs/tags/v}
        elif [[ $GITHUB_REF == refs/heads/master ]]; then
          echo ::set-output name=version::latest
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          echo ::set-output name=version::${GITHUB_REF#refs/heads/}
        else
          echo ::set-output name=version::snapshot
        fi

        echo ::set-output name=build_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        echo ::set-output name=docker_platforms::linux/amd64
        echo ::set-output name=docker_image::${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}
    -
      name: Set up QEMU
      id: qemu-setup
      uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: all
    -
      name: Install Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - 
      name: Builder instance name
      run: echo ${{ steps.buildx.outputs.name }}
    -
      name: Avilable Platforms
      run: echo ${{ steps.buildx.outputs.platforms }}
    -
      name: Checkout
      uses: actions/checkout@v2 
    - 
      name: Current Environment
      run: |
        echo home=$HOME
        echo git_ref=$GITHUB_REF
        echo git_sha=$GITHUB_SHA
        echo version=${{ steps.prepare.outputs.version }}
        echo date=${{ steps.prepare.outputs.build_date }}
        echo image=${{ steps.prepare.outputs.docker_image }}
        echo platforms=${{ steps.prepare.outputs.docker_platforms }}
        echo avail_platforms=linux/amd64
    - 
      name: Docker Buildx (no push)
      run: |
        docker buildx build \
          --platform ${{ steps.prepare.outputs.docker_platforms }} \
          --output "type=image,push=false" \
          --build-arg "VERSION=${{ steps.prepare.outputs.version }}" \
          --build-arg "BUILD_DATE=${{ steps.prepare.outputs.build_date }}" \
          --build-arg "VCS_REF=${GITHUB_SHA::8}" \
          --tag "biosplus/caddy2plus:${{ steps.prepare.outputs.version }}" \
          --file Dockerfile .
    -
      name: Login to DockerHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        logout: true
    - 
      name: Docker Buildx (Push to DockerHub)
      if: success()
      run: |
        docker buildx build \
          --platform ${{ steps.prepare.outputs.docker_platforms }} \
          --output "type=image,push=true" \
          --build-arg "VERSION=${{ steps.prepare.outputs.version }}" \
          --build-arg "BUILD_DATE=${{ steps.prepare.outputs.build_date }}" \
          --build-arg "VCS_REF=${GITHUB_SHA::8}" \
          --tag "biosplus/caddy2plus:${{ steps.prepare.outputs.version }}" \
          --file Dockerfile .
    - 
      name: Clear
      if: always()
      run: |
        rm -f ${HOME}/.docker/config.json
  Build_Push_GHCR:
    runs-on: ubuntu-latest
    steps:
    - name: Prepare
      id: prepare
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo ::set-output name=version::${GITHUB_REF#refs/tags/v}
        elif [[ $GITHUB_REF == refs/heads/master ]]; then
          echo ::set-output name=version::latest
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          echo ::set-output name=version::${GITHUB_REF#refs/heads/}
        else
          echo ::set-output name=version::snapshot
        fi

        echo ::set-output name=build_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        echo ::set-output name=docker_platforms::linux/amd64
        echo ::set-output name=docker_image::${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}
    -
      name: Set up QEMU
      id: qemu-setup
      uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: all
    -
      name: Install Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - 
      name: Builder instance name
      run: echo ${{ steps.buildx.outputs.name }}
    -
      name: Avilable Platforms
      run: echo ${{ steps.buildx.outputs.platforms }}
    -
      name: Checkout
      uses: actions/checkout@v2 
    - 
      name: Current Environment
      run: |
        echo home=$HOME
        echo git_ref=$GITHUB_REF
        echo git_sha=$GITHUB_SHA
        echo version=${{ steps.prepare.outputs.version }}
        echo date=${{ steps.prepare.outputs.build_date }}
        echo image=${{ steps.prepare.outputs.docker_image }}
        echo platforms=${{ steps.prepare.outputs.docker_platforms }}
        echo avail_platforms=linux/amd64
    - 
      name: Docker Buildx (no push)
      run: |
        docker buildx build \
          --platform ${{ steps.prepare.outputs.docker_platforms }} \
          --output "type=image,push=false" \
          --build-arg "VERSION=${{ steps.prepare.outputs.version }}" \
          --build-arg "BUILD_DATE=${{ steps.prepare.outputs.build_date }}" \
          --build-arg "VCS_REF=${GITHUB_SHA::8}" \
          --tag "biosplus/caddy2plus:${{ steps.prepare.outputs.version }}" \
          --file Dockerfile .
    -
      name: Login to Github Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.ACTION_TOKEN }}
        logout: true
    - 
      name: Docker Buildx (Push to Github Container Registry - ghcr.io)
      if: success()
      run: |
        docker buildx build \
          --platform ${{ steps.prepare.outputs.docker_platforms }} \
          --output "type=image,push=true" \
          --build-arg "VERSION=${{ steps.prepare.outputs.version }}" \
          --build-arg "BUILD_DATE=${{ steps.prepare.outputs.build_date }}" \
          --build-arg "VCS_REF=${GITHUB_SHA::8}" \
          --tag "biosplus/caddy2plus:${{ steps.prepare.outputs.version }}" \
          --file Dockerfile .
    - 
      name: Clear
      if: always()
      run: |
        rm -f ${HOME}/.docker/config.json